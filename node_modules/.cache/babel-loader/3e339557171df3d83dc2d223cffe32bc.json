{"ast":null,"code":"import React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction isGoogleMapScriptLoaded(id) {\n  var scripts = document.head.getElementsByTagName('script');\n\n  for (var i = 0; i < scripts.length; i++) {\n    if (scripts[i].getAttribute('id') === id) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction loadScript(src, id) {\n  if (isGoogleMapScriptLoaded(id)) {\n    return new Promise(function (resolve) {\n      return setTimeout(resolve, 500);\n    });\n  }\n\n  var script = document.createElement('script');\n  script.setAttribute('async', '');\n  script.setAttribute('id', id);\n  script.src = src;\n  document.querySelector('head').appendChild(script);\n  return new Promise(function (resolve) {\n    script.onload = function () {\n      resolve();\n    };\n  });\n}\n\nvar MapTypeId;\n\n(function (MapTypeId) {\n  MapTypeId[\"Roadmap\"] = \"roadmap\";\n  MapTypeId[\"Satellite\"] = \"satellite\";\n  MapTypeId[\"Hybrid\"] = \"hybrid\";\n  MapTypeId[\"Terrain\"] = \"terrain\";\n})(MapTypeId || (MapTypeId = {}));\n\nfunction isValidLocation(location) {\n  return location && Math.abs(location.lat) <= 90 && Math.abs(location.lng) <= 180;\n}\n\nvar GOOGLE_SCRIPT_URL = 'https://maps.googleapis.com/maps/api/js?libraries=places&key=';\n\nvar MapPicker = function MapPicker(_ref) {\n  var apiKey = _ref.apiKey,\n      defaultLocation = _ref.defaultLocation,\n      _ref$zoom = _ref.zoom,\n      zoom = _ref$zoom === void 0 ? 7 : _ref$zoom,\n      onChangeLocation = _ref.onChangeLocation,\n      onChangeZoom = _ref.onChangeZoom,\n      style = _ref.style,\n      className = _ref.className,\n      mapTypeId = _ref.mapTypeId;\n  var MAP_VIEW_ID = 'google-map-view-' + Math.random().toString(36).substr(2, 9);\n  var map = React.useRef(null);\n  var marker = React.useRef(null);\n\n  function handleChangeLocation() {\n    if (onChangeLocation) {\n      var currentLocation = marker.current.getPosition();\n      onChangeLocation(currentLocation.lat(), currentLocation.lng());\n    }\n  }\n\n  function handleChangeZoom() {\n    onChangeZoom && onChangeZoom(map.current.getZoom());\n  }\n\n  function loadMap() {\n    var Google = window.google;\n    var validLocation = isValidLocation(defaultLocation) ? defaultLocation : {\n      lat: 0,\n      lng: 0\n    };\n    map.current = new Google.maps.Map(document.getElementById(MAP_VIEW_ID), _extends({\n      center: validLocation,\n      zoom: zoom\n    }, mapTypeId && {\n      mapTypeId: mapTypeId\n    }));\n\n    if (!marker.current) {\n      marker.current = new Google.maps.Marker({\n        position: validLocation,\n        map: map.current,\n        draggable: true\n      });\n      Google.maps.event.addListener(marker.current, 'dragend', handleChangeLocation);\n    } else {\n      marker.current.setPosition(validLocation);\n    }\n\n    map.current.addListener('click', function (event) {\n      var clickedLocation = event.latLng;\n      marker.current.setPosition(clickedLocation);\n      handleChangeLocation();\n    });\n    map.current.addListener('zoom_changed', handleChangeZoom);\n  }\n\n  React.useEffect(function () {\n    loadScript(GOOGLE_SCRIPT_URL + apiKey, 'google-maps-' + apiKey).then(loadMap);\n  }, []);\n  React.useEffect(function () {\n    if (marker.current) {\n      map.current.setCenter(defaultLocation);\n      marker.current.setPosition(defaultLocation);\n    }\n  }, [defaultLocation]);\n  React.useEffect(function () {\n    if (map.current) {\n      map.current.setZoom(zoom);\n    }\n  }, [zoom]);\n  var componentStyle = Object.assign({\n    width: '100%',\n    height: '600px'\n  }, style || {});\n  return React.createElement(\"div\", {\n    id: MAP_VIEW_ID,\n    style: componentStyle,\n    className: className\n  });\n};\n\nexport default MapPicker;","map":{"version":3,"sources":["../src/MapPicker.tsx"],"names":["scripts","document","i","isGoogleMapScriptLoaded","setTimeout","script","resolve","MapTypeId","location","Math","GOOGLE_SCRIPT_URL","MapPicker","apiKey","defaultLocation","zoom","onChangeLocation","onChangeZoom","style","className","mapTypeId","MAP_VIEW_ID","map","React","marker","currentLocation","Google","window","validLocation","isValidLocation","lat","lng","center","position","draggable","clickedLocation","event","handleChangeLocation","loadScript","componentStyle","width","height","id"],"mappings":"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","sourcesContent":["import React, { FC } from 'react';\r\n\r\nfunction isGoogleMapScriptLoaded(id: string): boolean {\r\n    const scripts: HTMLCollectionOf<HTMLScriptElement> = document.head.getElementsByTagName('script');\r\n    for (let i: number = 0; i < scripts.length; i++) {\r\n        if (scripts[i].getAttribute('id') === id) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nfunction loadScript(src: string, id: string) {\r\n    if (isGoogleMapScriptLoaded(id)) {\r\n        // Make sure the script is loaded\r\n        return new Promise((resolve) => setTimeout(resolve, 500));\r\n    }\r\n\r\n    const script = document.createElement('script');\r\n    script.setAttribute('async', '');\r\n    script.setAttribute('id', id);\r\n    script.src = src;\r\n    (document.querySelector('head') as any).appendChild(script);\r\n\r\n    return new Promise<void>((resolve) => {\r\n        script.onload = () => {\r\n            resolve();\r\n        };\r\n    });\r\n}\r\n\r\ntype Location = {\r\n    lat: number,\r\n    lng: number\r\n}\r\n\r\nenum MapTypeId {\r\n    Roadmap = 'roadmap',\r\n    Satellite = 'satellite',\r\n    Hybrid = 'hybrid',\r\n    Terrain = 'terrain'\r\n}\r\n\r\ntype Props = {\r\n    apiKey: string,\r\n    defaultLocation: Location;\r\n    zoom?: number;\r\n    onChangeLocation?(lat: number, lng: number): void;\r\n    onChangeZoom?(zoom: number): void;\r\n    style?: any;\r\n    className?: string;\r\n    mapTypeId?: MapTypeId\r\n}\r\n\r\nfunction isValidLocation(location: Location) {\r\n    return location && Math.abs(location.lat) <= 90 && Math.abs(location.lng) <= 180;\r\n}\r\n\r\nconst GOOGLE_SCRIPT_URL = 'https://maps.googleapis.com/maps/api/js?libraries=places&key=';\r\n\r\nconst MapPicker: FC<Props> = ({ apiKey, defaultLocation, zoom = 7, onChangeLocation, onChangeZoom, style, className, mapTypeId }) => {\r\n    const MAP_VIEW_ID = 'google-map-view-' + Math.random().toString(36).substr(2, 9);\r\n    const map = React.useRef<any>(null);\r\n    const marker = React.useRef<any>(null);\r\n\r\n    function handleChangeLocation() {\r\n        if (onChangeLocation) {\r\n            const currentLocation = marker.current.getPosition();\r\n            onChangeLocation(currentLocation.lat(), currentLocation.lng());\r\n        }\r\n    }\r\n\r\n    function handleChangeZoom() {\r\n        onChangeZoom && onChangeZoom(map.current.getZoom());\r\n    }\r\n\r\n    function loadMap() {\r\n        const Google = (window as any).google;\r\n        const validLocation = isValidLocation(defaultLocation) ? defaultLocation : { lat: 0, lng: 0 };\r\n\r\n        map.current = new Google.maps.Map(document.getElementById(MAP_VIEW_ID),\r\n            {\r\n                center: validLocation,\r\n                zoom: zoom,\r\n                ...(mapTypeId && { mapTypeId })\r\n            });\r\n\r\n        if (!marker.current) {\r\n            marker.current = new Google.maps.Marker({\r\n                position: validLocation,\r\n                map: map.current,\r\n                draggable: true\r\n            });\r\n            Google.maps.event.addListener(marker.current, 'dragend', handleChangeLocation);\r\n        } else {\r\n            marker.current.setPosition(validLocation);\r\n        }\r\n\r\n        map.current.addListener('click', function (event: any) {\r\n            const clickedLocation = event.latLng;\r\n\r\n            marker.current.setPosition(clickedLocation);\r\n            handleChangeLocation();\r\n        });\r\n\r\n        map.current.addListener('zoom_changed', handleChangeZoom);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        loadScript(GOOGLE_SCRIPT_URL + apiKey, 'google-maps-' + apiKey).then(loadMap);\r\n    }, [])  // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    React.useEffect(() => {\r\n        if (marker.current) {\r\n            map.current.setCenter(defaultLocation);\r\n            marker.current.setPosition(defaultLocation);\r\n        }\r\n    }, [defaultLocation]);\r\n\r\n    React.useEffect(() => {\r\n        if (map.current) {\r\n            map.current.setZoom(zoom);\r\n        }\r\n    }, [zoom]);\r\n\r\n    const componentStyle = Object.assign({ width: '100%', height: '600px' }, style || {});\r\n\r\n    return (\r\n        <div id={MAP_VIEW_ID} style={componentStyle} className={className}></div>\r\n    );\r\n};\r\nexport default MapPicker;"]},"metadata":{},"sourceType":"module"}